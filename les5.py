#ЦИКЛЫ FOR/ WHILE /Переменная цикла
#Цикл for
#Переменная цикла

#В Python существует две основных разновидности циклов:
#циклы, повторяющиеся определенное количество раз (for, счетные циклы, counting loops);
#циклы, повторяющиеся до наступления определенного события (while, условные циклы, conditional loops)

#Цикл for замечательно работает, если мы заранее знаем, сколько повторений (итераций) нам требуется сделать

#код, который распечатает 10 раз слово "Привет":
for i in range(10):
    print('Привет')

#Структура цикла for в Python выглядит так:

for 'название_переменной_цикла' in range('количество повторений'):
    #блок кода

#Двоеточие (:) в конце строки с инструкцией for сообщает интерпретатору Python, 
# что дальше находится блок команд. 
# В блок команд входят все строки, расположенные с отступом от строки с инструкцией for, вплоть до следующей строки без отступа.

for i in range(5): #Сколько раз выполнить 
    #эта программа будет выполняться 5 раз
    num = int(input())  
    print('Квадрат вашего числа равен:', num * num)
    # После выполнения программы выше 5 раз появится сообщение:
print('Цикл завершен')

#ПЕРЕМЕННАЯ ЦИКЛА

#Структура цикла FOR
for название_переменной_цикла in range(количество повторений):
    блок кода

for i in range(10):
    print(i)
#Результат:
#0
#1
#2
#3
#4
#5
#6
#7
#8
#9

#Когда цикл впервые начинает работу Python устанавливает значение переменной цикла i = 0. 
# Каждый раз когда мы повторяем тело цикла Python увеличивает значение переменной на 1.

#Поскольку переменная цикла i увеличивается на 1 каждый раз, то ее можно использовать для отслеживания номера итерации, 
# на которой мы находимся в циклическом процессе.
for i in range(10):
    print(i, '-- Привет')
#Результат:
#0 -- Привет
#1 -- Привет
#2 -- Привет
#3 -- Привет
#4 -- Привет
#5 -- Привет
#6 -- Привет
#7 -- Привет
#8 -- Привет
#9 -- Привет
#Если мы хотим начать с 1, то можем написать код:
for i in range(10):
    print(i + 1, '-- Привет')

#Ранее говорилось, что имена переменных должны носить осмысленный характер и описывать их назначение. 
# Однако для переменных цикла иногда делается исключения. В программировании для переменных цикла обычно используют буквы i, j, k.
#Следующие две программы абсолютно одинаковые: в первой программе переменная цикла имеет название i, во второй программе number
for i in range(10):                for number in range(10):
    print(i)                           print(number)

#Бывают ситуации когда переменная цикла не используется в теле цикла. 
# В таком случае, вместо того, чтобы давать ей имя, мы можем указать символ нижнего подчеркивания _
for _ in range(5):
    print('Python - awesome!')

#Следует помнить, что правая граница цикла в Python всегда не включительна. Таким образом следующий код:
for i in range(5):
    print(i)
# 0 - 4
#Если требуется распечатать числа от 1 до 5, то мы пишем код
for i in range(5):
    print(i + 1)

#Функция range() с одним параметром!!!

#Если быть более точным, то мы говорим, 
# что функция range(n) генерирует последовательность чисел от 0 до n-1, 
# а цикл for последовательно перебирает эту последовательность

#Перегрузка range() с двумя параметрами!!!

#Если мы хотим начинать последовательность не с 0, 
# а с какого-то другого числа, то мы можем использовать перегрузку функции range() 
# принимающую два параметра. Например, вызов функции range(1, 5) 
# сгенерирует последовательность чисел 1, 2, 3, 4  
# (будьте внимательны, правая граница не включительна). Если нам нужны числа от 1 до 5 включительно,
#  то мы используем range(1, 6)

#range(n): создает последовательность чисел 0, 1, 2, 3, ..., n - 1
#range(n, m): создает последовательность чисел n, n + 1, n + 2, ..., m - 2, m - 1

#Напишем программу, которая 
# выводит те числа из промежутка [100;999], которые оканчиваются на 7
for i in range(100, 1000):  # перебираем числа от 100 до 999
    if i % 10 == 7:         # используем остаток от деления на 10, для получения последней цифры
        print(i)
#Если первый параметр больше второго, то функция range() генерирует пустую последовательность.
#  Например, вызов функции range(10, 1) приводит к генерации пустой последовательности.

#Перегрузка range() с 3 параметрами!!!

#Передавая два параметра в функцию range() мы можем генерировать любую последовательность целых чисел
# с шагом 1. Но, что делать если нужно поменять шаг? 
# Как быть если мы хотим сгенерировать последовательность чисел 5, 10, 15, 20, 25? 
# В этом случае существует еще одна перегрузка функции range(), 
# принимающая три параметра: range(n, m, k). 
# Первый параметр задает старт последовательности, второй параметр задает стоп последовательности 
# и третий – шаг генерации чисел.

#Напишем программу, которая выводит все четные числа из промежутка [56; 170].
#Используя функцию range() с тремя параметрами, получаем:
for i in range(56, 171, 2):
    print(i)
#АНАЛОГ, но не такой эффективный:
for i in range(56, 171):
    if i % 2 == 0:
        print(i)

#Отрицательный шаг генерации!!!

#сли шаг генерации является положительным числом, то генерируемая последовательность будет возрастать.
# Мы можем указать отрицательный шаг генерации (третий параметр), 
# что приведет к генерированию убывающей последовательности.

#Например, вызов функции range(20, 16, -1) создаст последовательность чисел 20, 19, 18, 17, 
# а вызов функции range(20, 10, -3) сгенерирует последовательность 20, 17, 14, 11

#Напишем программу, которая отсчитывает от 5 до 1, а затем выводит текст Взлетаем!!!
for i in range(5, 0, -1):
    print(i, end=' ')
print('Взлетаем!!!')

#Примечание 1. Функция range() может принимать от одного до трех параметров: range(n), range(n, m), range(n, m, k)

range(n, m, k)
#первый параметр – это старт последовательности (включительно);
#второй параметр – это стоп последовательности (не включительно);
#третий параметр – это величина шага.

#Примечание 2. Функция range() может генерировать только целые числа, включая отрицательные.

#Примечание 3. Величина шага не может равняться нулю.
