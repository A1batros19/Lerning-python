#ОПЕРАТОР IN / МОДУЛЬ MATH
s = input()
if 'a' in s:
    print('Введенная строка содержит символ а')
else:
    print('Введенная строка не содержит символ а')
#Такой код проверяет, содержится ли в переменной s символ a и выводит соответствующий текст.

#можем использовать оператор in вместе с логическим оператором not. Например
s = input()
if '.' not in s:
    print('Введенная строка не содержит символа точки')

#С помощью оператора in мы можем упростить следующий код, 
# проверяющий, что в переменной s находится один из 5 символов a, e, i, o, u:
if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':
    print('YES')
#Проще
if len(s) == 1 and s in 'aeiou': #длина строки ==1 и s in содержится в (aeiou)
    print('YES')

#МОДУЛЬ MATH
#Python является множество разнообразных функций, которые уже реализованы и готовы к использованию. 
# Такие функции упакованы в модули. 
# В Python модулем называется библиотека функций, которую можно подключать к своим программам.
# math – один из наиважнейших в Python. 
# Этот модуль предоставляет обширный функционал для проведения вычислений с вещественными числами (числами с плавающей точкой).

#в начале программы необходимо подключить модуль, что делается командой import ТАК ОБЫЧНО НЕ ДЕЛАЮТ:
import math

#После подключения модуля мы можем использовать его функции. Пусть мы хотим:
#-вычислить корень квадратный из двух
#округлить число 3.83.8 до ближайшего целого числа вверх и вниз
#ТАК ДЕЛАТЬ НЕ РАЦИОНАЛЬНО!!!!
import math

num1 = math.sqrt(2)     # вычисление корня квадратного из двух
num2 = math.ceil(3.8)   # округление числа вверх
num3 = math.floor(3.8)  # округление числа вниз

print(num1)
print(num2)
print(num3)
#1.4142135623730951
#4
#3

#Как можно заметить из примера выше, для вызова функции мы вынуждены указывать название модуля и символ точки. 
# С другой стороны, если функции используются достаточно часто, 
# то такой вызов (постоянное указание названия модуля и символа точки) может усложнить программу и сделать её менее читабельной. 
# Для того, чтобы не указывать название модуля и символ точки при вызове функций, мы пишем следующий код:

from math import * #подключение модуля следующим образом:

num1 = sqrt(2)     # вычисление корня квадратного из двух
num2 = ceil(3.8)   # округление числа вверх
num3 = floor(3.8)  # округление числа вниз

print(num1)
print(num2)
print(num3)

#Если нужно использовать только некоторые функции модуля, то мы можем импортировать только их следующим образом:
from math import sqrt, ceil

print(sqrt(25))
print(ceil(34.7))

print(floor(12.8))  # приведет к ошибке, так как функция floor не подключена

#ОКРУГЛЕНИЕ
#nt()	Округляет число в сторону нуля
#round(x)	Округляет число x до ближайшего целого. 
# Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
#round(x, n)	Округляет число x до n знаков после точки
#floor(x)	Округляет число x вниз («пол»)
#ceil(x)	Округляет число x вверх («потолок»)
#abs(x)	Модуль числа x (абсолютная величина)

#КОРНИ, логарифмы, степени и факториал
#sqrt(x)	Квадратный корень числа x
#pow(x, n)	Возведение числа x в степень n
#log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
#log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
#log(x, b)	Логарифм числа x по основанию b
#factorial(n)	Факториал натурального числа n

#Тригонометрия
#degrees(x)	Преобразует угол x, заданный в радианах, в градусы
#radians(x)	Преобразует угол x, заданный в градусах, в радианы
#cos(x)	Косинус угла x, задаваемого в радианах
#sin(x)	Синус угла x, задаваемого в радианах
#tan(x)	Тангенс угла x, задаваемого в радианах
#acos(x)	Возвращает угол в радианах от 00 до pi, cos которого равен x
#asin(x)	Возвращает угол в радианах от -pi/2 до pi/2 sin которого равен х
#atan(x)	Возвращает угол в радианах от -pi/2 до pi/2 tan которого равен х
#atan2(y, x)	Полярный угол (в радианах) точки с координатами (x, y)

#Встроенные КОНСТАНТЫ
pi = 3.14
e = 2.718

#Все функции модуля math возвращают значение, которое можно вывести на экран, 
# присвоить другой переменной или использовать в математическом выражении.

#Для использования функций int(), float(), abs(), min(), max(), round() 
# подключать модуль math нет необходимости. Это так называемые встроенные функции.

#Вызов функций pow(x, n) можно заменить использованием оператора возведения в степень: x**n