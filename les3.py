#Числовые типы данных  FLOAT / MIN/ MAX / ABC / СТРОКОВОЙ ТИП ДАННЫХ ДЕЙСТВИЯ СО СТРОКАМИ
#Целочисленный тип данных int
#Числа с плавающей точкой float
#Встроенные функции max(), min(), abs()

#Преобразование строки в целое число
num = int(input()) # преобразование считанной строки в целое число
n = int('12345')  # преобразование строки в целое число

atom = 10 ** 80  # количество атомов во вселенной
print('Количество атомов =', atom)
#Количество атомов = 100000000000000000000000000000000000000000000000000000000000000000000000000000000

#Для удобства чтения чисел
num1 = 25_000_000
num2 = 25000000
print(num1)
print(num2)
#25000000
#25000000

#Числа с плавающей точкой FLOAT
e = 2.71828  # литерал с плавающей точкой
pi = 3.1415  # литерал с плавающей точкой

num = float(input()) # преобразование считанной строки в число с плавающей точкой
n = float('1.2345')  # преобразование строки к числу с плавающей точкой

#Преобразование между int и float

#при необходимости Python автоматически преобразует целые числа в числа с плавающей точкой.
#Число с плавающей точкой нельзя неявно преобразовать в целое число. 
# Для такого преобразования необходимо использовать явное преобразование с помощью команды int()

#Обратите внимание, что преобразование чисел с плавающей точкой в целое производится 
# с округлением в сторону нуля 1.7 ->1 -1.7->-1

#Встроенные функции
#print() — вывести на экран;
#input() — считать с клавиатуры;
#int() — преобразовать к целому числу;
#float() — преобразовать к числу с плавающей точкой.

#Функции min() и max()
a = max(3, 8, -3, 12, 9)
b = min(3, 8, -3, 12, 9)
c = max(3.14, 2.17, 9.8)
print(a)
print(b)
print(c)
#Получается:
#12
#-3
#9.8

#Функция abs() МОДУЛЬ
#Для нахождения модуля (абсолютной величины) числа в Python используется функция abs()
print(abs(10))
print(abs(-7))
print(abs(0))
print(abs(-17.67))
#10
#7
#0
#17.67

#все три функции max(), min(), abs() работают как с целыми числами, 
# так и с числами с плавающей точкой.

#СТРОКОВОЙ ТИП ДАННЫХ
#Строковый тип данных str
#Функции len() и str()
#Конкатенация строк
#Умножение строки на число
#Оператор in

#Создание строки
s1 = 'Python rocks!'
s2 = "Python rocks!"
s = input()  # переменная s имеет строковый тип str
s1 = ''   # пустая строка
s2 = ' '  # строка состоящая из одного символа пробела
#Чтобы посчитать длину строки используем встроенную функцию len()
s1 = 'abcdef'
length1 = len(s1)               # считаем длину строки из переменной s1
length2 = len('Python rocks!')  # считаем длину строкового литерала
print(length1)
print(length2)
#6
#13

#Преобразование чисел в строку
num1 = 1777    # целое число
num2 = 17.77   # число с плавающей точкой
s1 = str(num1) # преобразовали целое число в строку '1777'
s2 = str(num2) # преобразовали число с плавающей точкой в строку '17.77'

#Операция сложения строк называется КОНКАТЕНАЦИЕЙ или сцеплением
s1 = 'ab' + 'bc'
s2 = 'bc' + 'ab'
s3 = s1 + s2 + '!!'
print(s1)
print(s2)
print(s3)
#abbc
#bcab
#abbcbcab!!

#С помощью конкатенации строк можно эмулировать вывод данных, который раньше мы делали 
# используя необязательные параметры sep и end
print('a', 'b', 'c', sep='*', end='!')
print()  # переход на новую строку
print('a' + '*' + 'b' + '*' + 'c' + '!')
#a*b*c!
#a*b*c!

#Умножение строки на число
s = 'Hi' * 4
print(s)
#HiHiHiHi

print('-' * 75)
#---------------------------------------------------------------------------

#Тройные кавычки в Python используются для многострочного (multiline) текста. Например,
text = '''Python is an interpreted, high-level, general-purpose programming language.
Created by Guido van Rossum and first released in 1991, Python design 
philosophy emphasizes code readability with its notable use of significant whitespace.'''
#Одинарные и двойные кавычки ЗАЧЕМ
s1 = 'Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"'
s2 = "Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'"
print(s1)
print(s2)
#Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"
#Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'


